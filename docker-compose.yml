version: '3'
#remove all images
#docker rm $(docker ps -aq)
#docker stop $(docker ps -aq)
#docker rm $(docker ps -aq)
#docker system prune -a
#docker-compose build
services:
  mongo:
    image: mongo:3.4
    hostname: mongo
    command: []
    ports:
      - "27017:27017"
    volumes:
      - mongodb:/data/db

  api-gateway:
    build: ./pick-5-backend/api-gateway
    image: api-gateway
    # depends_on:
    #  - eureka-server
    ports:
      - "8080:8080"

  # eureka-server:
  #   build: ./pick-5-backend/eureka-server
  #   image: eureka-server
  #   ports:
  #     - "8761:8761"

  authentication-app:
    build: ./pick-5-backend/authentication-app
    image: authentication-app
    # depends_on:
    #  - eureka-server
    # deploy:
    #   mode: replicated
    #   replicas: 1
    ports:
      - "8081:8081"

  backend-service:
    build: ./pick-5-backend/backend-service
    image: backend-service
    # depends_on:
    #  - eureka-server
    # deploy:
    #   mode: replicated
    #   replicas: 1
    ports:
      - "8082:8082"
volumes:
  mongodb:


  # eureka-client:
  #   build: ./pick-5-backend/eureka-client
  #   image: eureka-client
  #   depends_on:
  #    - eureka-server
  #   deploy:
  #     mode: replicated
  #     replicas: 1


  

  # postgres:
  #   hostname: postgres
  #   image: postgres:9.6-alpine
  #   restart: always
  #   command: postgres -c config_file=/postgresql.conf
  #   volumes:
  #     - ./postgresql.conf:/postgresql.conf
  #     - ./postgres-data:/var/lib/postgresql/data
  #   ports:
  #     - 5432:5432
  #   environment:
  #     - POSTGRES_DB=pick-5-postgres
  #   networks:
  #     - pick-5-network

#   mongo:
#     image: mongo:3.4
#     hostname: mongo
#     command: []
#     ports:
#       - "27017:27017"
#     volumes:
#       - mongodb:/data/db
#     networks:
#       - pick-5-network
#     depends_on:
#       - "redis"

#   redis:
#     image: redis:4.0.5-alpine
#     hostname: redis
#     command: ["redis-server", "--appendonly", "yes"]
#     ports:
#       - "6379:6379"
#     volumes:
#       - redisdb
#     networks:
#       - pick-5-network


#   redisdb:
#   # postgres:

# networks:
#   pick-5-network:
  # zuul:
  #   build: ../zuul
  #   container_name: zuul
  #   hostname: zuul
  #   restart: always
  #   ports:
  #     - "9092:9092"
  #   volumes:
  #     - ./zuul/config:/tmp/config
  #     - ./zuul/logs:/tmp/logs
  #   depends_on:
  #     # - auth-server
  #   networks:
  #     - pick-5-network
  # auth-server:
  #   build: ../auth-server
  #   container_name: auth-server
  #   hostname: auth-server
  #   restart: always
  #   ports:
  #     - "9999:9999"
  #   volumes:
  #     - ./auth-server/config:/tmp/config
  #     - ./auth-server/logs:/tmp/logs
  #   depends_on:
  #     - eureka
  #   networks:
  #     - app_net
  # mysql:
  #   container_name: mysql-ms
  #   hostname: mysql
  #   image: mysql:5.7.19
  #   ports:
  #     - "3306:3306"
  #   environment:
  #     MYSQL_ROOT_PASSWORD: password
  #   volumes:
  #     - ./mysql/scripts:/docker-entrypoint-initdb.d
  #     - ./mysql/data:/var/lib/mysql
  #   command: [--ssl=0]
  #   healthcheck:
  #     test: ["CMD", "mysqladmin" ,"ping", "-uroot", "-ppassword"]
  #     interval: 10s
  #     timeout: 60s
  #     retries: 5
  #   networks:
  #     - pick-5-network


  

  # x-team-api:
  #   build:
  #     context: ../xteamApi
  #   image: x-team-api-tpd
  #   environment:
  #     - SPRING_DATA_MONGODB_HOST=mongo
  #     - SPRING_DATA_REDIS_HOST=redis
  #   ports:
  #     - "8080:8080"
  #   networks:
  #     - x-team-network
  #   depends_on:
  #     - "mongo"
  #     - "redis"

  # x-team-client:
  #   build:
  #     context: ../xteamClient
  #   image: x-team-client-tpd
  #   ports:
  #     - "8900:80"
  #   networks:
  #     - x-team-network
  #   depends_on:
  #     - "x-team-api"
# version: '2'
# services:
  
#    # app:
#   #   restart: always
#   #   build: ./pick-5-backend/
#   #   working_dir: /app
#   #   volumes:
#   #     - ./app:/app
#   #     - ~/.m2:/root/.m2
#   #   expose:
#   #     - "8080"
#   #   command: mvn clean spring-boot:run
#   #   depends_on:
#   #     - nginx
#   #     - mongodb
#   mongodb:
#     container_name: pick-5-mongo
#     image: mongo:3.6
#     environment:
#       - MONGO_DATA_DIR=/data/db
#       - MONGO_LOG_DIR=/dev/null
#     volumes:
#       - ./data/db:/data/db
#     ports:
#         - 27017:27017
#     command: mongod --smallfiles  # --quiet --logpath=/dev/null
#   config-server:
#     image: gradle:latest
#     working_dir: /srv
#     command: ./gradlew bootRun
#     volumes:
#       - ./apps/config-server:/srv
#       - ./configs:/configs
#       - ./storage/config-server.gradle:/home/gradle/.gradle
#     ports:
#       - "8888:8080"
#     environment:
#       - "GRADLE_HOME=/home/gradle/.gradle"
#       - "SPRING_PROFILES_ACTIVE=docker,dev,file-config"

#   service-registry:
#     image: gradle:latest
#     working_dir: /srv
#     command: ./gradlew bootRun
#     volumes:
#       - ./apps/service-registry:/srv
#       - ./storage/service-registry.gradle:/home/gradle/.gradle
#     ports:
#       - "8761:8080"
#     environment:
#       - "GRADLE_HOME=/home/gradle/.gradle"
#       - "SPRING_PROFILES_ACTIVE=docker,dev"
      
#   pick-5-backend:
#     image: gradle:jdk10
#     working_dir: /srv
#     command: ./gradlew bootRun
#     volumes:
#       - ./apps/pick-5-backend:/srv
#       - ./storage/pick-5-backend.gradle:/home/gradle/.gradle
#     ports:
#       - "8090:8080"
#     environment:
#       - "GRADLE_HOME=/home/gradle/.gradle"
#       - "SPRING_PROFILES_ACTIVE=docker,dev"
#       - "MONGODB_URI=mongodb://mongo_db:27017"
#   nginx-proxy:
#     image: jwilder/nginx-proxy
#     container_name: nginx-proxy
#     ports:
#       - '80:80'
#       - 443:443
#     networks:
#       default:
#         aliases:
          
#     volumes:
#       - /var/run/docker.sock:/tmp/docker.sock:ro
  # nginx:
  #  container_name: pick-5-nginx
  #  image: nginx:1.13
  #  restart: always
  #  ports:
  #  - 80:80
  #  - 443:443
  #  volumes:
  #  - ./nginx/conf.d:/etc/nginx/conf.d

 